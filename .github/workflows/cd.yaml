name: Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - saga
    paths-ignore:
      - Dockerfile
      - .github/workflows/test-docker.yaml
      - .github/workflows/publish-docker.yaml
      - .github/workflows/test-and-release.yaml

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment:
      name: production
      url: ${{ steps.web-app-url.outputs.web_app_url }}

    env:
      APP_REG_CLIENT_ID: ${{ secrets.APP_REG_CLIENT_ID }}
      LOCATION: ${{ secrets.LOCATION }}
      APP_NAME: ${{ secrets.APP_NAME }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
      B2C_TENANT: ${{ secrets.B2C_TENANT }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      UNWIRED_LABS_API_KEY: ${{ secrets.UNWIRED_LABS_API_KEY }}
      NRF_CLOUD_TEAM_ID: ${{ secrets.NRF_CLOUD_TEAM_ID }}
      NRF_CLOUD_CELL_LOCATION_SERVICE_KEY:
        ${{ secrets.NRF_CLOUD_CELL_LOCATION_SERVICE_KEY }}
      NRF_CLOUD_AGPS_LOCATION_SERVICE_KEY:
        ${{ secrets.NRF_CLOUD_AGPS_LOCATION_SERVICE_KEY }}
      NRF_CLOUD_PGPS_LOCATION_SERVICE_KEY:
        ${{ secrets.NRF_CLOUD_AGPS_LOCATION_SERVICE_KEY }}

    outputs:
      web_app_url: ${{ steps.web-app-url.outputs.web_app_url }}

    steps:
      # We are authenticating here the non-containerized environment, so we
      # can run the Azure JavaScript SDK with these credentials
      # Needs to be done before the in-container auth in the next step
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # In-container auth in the next step
      - name: Login to Azure CLI
        uses: azure/CLI@v1
        with:
          inlineScript: |
            AZURE_CLIENT_ID=`jq -r '.clientId' <<< '${{ secrets.AZURE_CREDENTIALS }}'`
            AZURE_TENANT_ID=`jq -r '.tenantId' <<< '${{ secrets.AZURE_CREDENTIALS }}'`
            AZURE_CLIENT_SECRET=`jq -r '.clientSecret' <<< '${{ secrets.AZURE_CREDENTIALS }}'`
            echo "::add-mask::${AZURE_CLIENT_SECRET}"
            az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
      - name: List Azure Accounts
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az account list --output table
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci --no-audit
      - name: Compile source
        run: npx tsc
      - name: Enable Unwired Labs API
        if: env.UNWIRED_LABS_API_KEY != ''
        run: echo "enableUnwiredLabsCellLocation=true" >> $GITHUB_ENV
      - name: Disable Unwired Labs API
        if: env.UNWIRED_LABS_API_KEY == ''
        run: echo "enableUnwiredLabsCellLocation=false" >> $GITHUB_ENV
      - name: Enable nRF Cloud Cell Location API
        if:
          env.NRF_CLOUD_TEAM_ID != '' && env.NRF_CLOUD_CELL_LOCATION_SERVICE_KEY
          != ''
        run: echo "enableNrfCloudCellLocationService=true" >> $GITHUB_ENV
      - name: Disable nRF Cloud Cell Location API
        if:
          env.NRF_CLOUD_TEAM_ID == '' || env.NRF_CLOUD_CELL_LOCATION_SERVICE_KEY
          == ''
        run: echo "enableNrfCloudCellLocationService=false" >> $GITHUB_ENV
      - name: Enable nRF Cloud Assisted GPS Location API
        if:
          env.NRF_CLOUD_TEAM_ID != '' && env.NRF_CLOUD_AGPS_LOCATION_SERVICE_KEY
          != ''
        run: echo "enableNrfCloudAGPSLocationService=true" >> $GITHUB_ENV
      - name: Disable nRF Cloud Assisted GPS Location API
        if:
          env.NRF_CLOUD_TEAM_ID == '' || env.NRF_CLOUD_AGPS_LOCATION_SERVICE_KEY
          == ''
        run: echo "enableNrfCloudAGPSLocationService=false" >> $GITHUB_ENV
      - name: Enable nRF Cloud Predicted GPS Location API
        if:
          env.NRF_CLOUD_TEAM_ID != '' && env.NRF_CLOUD_PGPS_LOCATION_SERVICE_KEY
          != ''
        run: echo "enableNrfCloudPGPSLocationService=true" >> $GITHUB_ENV
      - name: Disable nRF Cloud Predicted GPS Location API
        if:
          env.NRF_CLOUD_TEAM_ID == '' || env.NRF_CLOUD_PGPS_LOCATION_SERVICE_KEY
          == ''
        run: echo "enableNrfCloudPGPSLocationService=false" >> $GITHUB_ENV
      - name: Set Key Vault name
        run: |
          echo "keyVaultName=${APP_NAME:-memfault}" >> $GITHUB_ENV
      - name: Determine Version
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          TAG=`git tag --contains ${{ github.sha }} | tr -d '\n'`
          VERSION=${TAG:-${{ github.sha }}}
          echo Version: ${VERSION}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Deploy solution
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --mode Complete \
              --name cd-${{ env.VERSION }} \
              --template-file azuredeploy.json \
              --parameters \
                appName=${APP_NAME:-memfault} \
                storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }} \
                appRegistrationClientId=${{ env.APP_REG_CLIENT_ID }} \
                b2cTenant=${{ env.B2C_TENANT }} \
                enableUnwiredLabsCellLocation=${enableUnwiredLabsCellLocation} \
                enableNrfCloudCellLocationService=${enableNrfCloudCellLocationService} \
                enableNrfCloudAGPSLocationService=${enableNrfCloudAGPSLocationService} \
                nrfCloudTeamId=${{ env.NRF_CLOUD_TEAM_ID }} \
                keyVaultName=${{ env.keyVaultName }}
      - name: Get Azure object ID for current user
        uses: azure/CLI@v1
        with:
          inlineScript: |
            AZURE_CLIENT_ID=`jq -r '.clientId' <<< '${{ secrets.AZURE_CREDENTIALS }}'`
            echo "USER_OBJECT_ID=`az ad sp show --id ${AZURE_CLIENT_ID} --query objectId --out tsv | tr -d '\n'`" >> $GITHUB_ENV
      - name: Grant user write access to key vault
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az keyvault set-policy --name ${{ env.keyVaultName }} --object-id ${USER_OBJECT_ID} --secret-permissions set
      - name: Set Unwired Labs API key
        if: env.enableUnwiredLabsCellLocation == 'true'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az keyvault secret set --vault-name ${{ env.keyVaultName }} --name unwiredlabsApiKey --value ${{ secrets.UNWIRED_LABS_API_KEY }}
      - name: Set nRF Cloud Cell Location service key
        if: env.enableNrfCloudCellLocationService == 'true'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "${{ secrets.NRF_CLOUD_CELL_LOCATION_SERVICE_KEY }}" > nrfcloudcelllocationservice.key
            az keyvault secret set --vault-name ${{ env.keyVaultName }} --name nrfCloudCellLocationServiceKey --file nrfcloudcelllocationservice.key
            rm nrfcloudcelllocationservice.key
      - name: Set nRF Cloud Assisted GPS Location service key
        if: env.enableNrfCloudAGPSLocationService == 'true'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "${{ secrets.NRF_CLOUD_AGPS_LOCATION_SERVICE_KEY }}" > nrfcloudagpslocationservice.key
            az keyvault secret set --vault-name ${{ env.keyVaultName }} --name nrfCloudAGPSLocationServiceKey --file nrfcloudagpslocationservice.key
            rm nrfcloudagpslocationservice.key
      - name: Set nRF Cloud Predicted GPS Location service key
        if: env.enableNrfCloudPGPSLocationService == 'true'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "${{ secrets.NRF_CLOUD_PGPS_LOCATION_SERVICE_KEY }}" > nrfcloudpgpslocationservice.key
            az keyvault secret set --vault-name ${{ env.keyVaultName }} --name nrfCloudPGPSLocationServiceKey --file nrfcloudpgpslocationservice.key
            rm nrfcloudpgpslocationservice.key
      - name: Pack Function App
        run: node scripts/pack-app.js
      - name: Deploy Function App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az functionapp deployment source config-zip -g ${{ env.RESOURCE_GROUP }} -n ${APP_NAME:-memfault}api --src dist/functionapp.zip
      - uses: actions/upload-artifact@v3
        with:
          name: functionapp-${{ github.sha }}
          path: dist/functionapp.zip
      - name: Enable static site hosting for the app
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob service-properties update --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --static-website --404-document index.html --index-document index.html
      - name: Determine Web App settings
        run: node cli react-config >> $GITHUB_ENV
      - name: Determine public URL
        id: web-app-url
        uses: azure/CLI@v1
        with:
          inlineScript: |
            PUBLIC_URL=`az storage account show -g ${{ env.RESOURCE_GROUP }} -n ${{ env.STORAGE_ACCOUNT_NAME }} --query 'primaryEndpoints.web' --output tsv | tr -d '\n'`
            echo "::set-output name=web_app_url::${PUBLIC_URL}"
            echo "PUBLIC_URL=${PUBLIC_URL}" >> $GITHUB_ENV
      - name: Build app
        run: |
          export EXTEND_ESLINT=true
          WEBAPP_REPO=`cat package.json | jq -r '.deploy.webApp.repository'`
          WEBAPP_BRANCH=`cat package.json | jq -r '.deploy.webApp.branch'`
          git clone --branch $WEBAPP_BRANCH --single-branch $WEBAPP_REPO app
          cd app
          git fetch --tags
          export REACT_APP_VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $REACT_APP_VERSION
          npm ci --no-audit
          npm run build
      - name: Deploy Web App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name ${{ env.STORAGE_ACCOUNT_NAME }} -s ./app/build -d '$web'

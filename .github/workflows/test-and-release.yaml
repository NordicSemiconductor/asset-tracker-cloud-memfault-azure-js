name: Test and Release

on:
  workflow_dispatch:
  push:

env:
  LOCATION: norwayeast

permissions:
  id-token: write
  contents: write
  issues: write

jobs:
  run-id:
    runs-on: ubuntu-22.04

    outputs:
      id: ${{ steps.run-id.outputs.id }}

    steps:
      - name: Generate ID
        id: run-id
        run: |
          RUN_ID=`node -e "const crypto = require('crypto'); process.stdout.write(crypto.randomBytes(Math.ceil(8 * 0.5)).toString('hex').slice(0, 8));"`
          echo "::set-output name=id::${RUN_ID}"

  mock-api:
    runs-on: ubuntu-22.04

    outputs:
      endpoint: ${{ steps.endpoint.outputs.endpoint }}

    environment:
      name: ci

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Compile source
        run: npx tsc

      - name: Create resource group
        run:
          az group create -n mock-api-${{ needs.run-id.outputs.id }} -l ${{
          env.LOCATION }}

      - name: Create Mock API
        run: |-
          az deployment group create
            --mode Complete
            --name manual-deployment
            --resource-group mock-api-${{ needs.run-id.outputs.id }}
            --template-file mock-http-api.bicep
            --parameters
                storageAccountName=mock-api-${{ needs.run-id.outputs.id }}

      - name: Get API endpoint
        id: endpoint
        run: |
          MOCK_HTTP_API_ENDPOINT=`az functionapp show -g mock-api-${{ needs.run-id.outputs.id }} -n mock-api-${{ needs.run-id.outputs.id }} | jq -r '.defaultHostName'`
          echo "::set-output name=endpoint::${MOCK_HTTP_API_ENDPOINT}"

      - name: Deploy the function app
        run: |
          npx tsx scripts/pack-mock-http-api-app.ts
          az functionapp deployment source config-zip -g mock-api-${{ needs.run-id.outputs.id }} -n mock-api-${{ needs.run-id.outputs.id }} --src dist/mock-http-api.zip

  test-resources:
    needs: [run-id]
    runs-on: ubuntu-22.04

    environment:
      name: ci

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create resource group
        run:
          az group create -n memfault-integration-${{ needs.run-id.outputs.id }}
          -l ${{ env.LOCATION }}

      # Keyvault
      # IoT Hub

  test:
    runs-on: ubuntu-22.04
    needs: [test-resources, mock-api]

    environment:
      name: ci

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Compile source
        run: npx tsc

  cleanup:
    runs-on: ubuntu-22.04
    needs: [test]
    if: always() && !cancelled()

    environment:
      name: ci

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Delete resource group
        run:
          az group delete -n memfault-integration-${{ needs.run-id.outputs.id }}
          -y

      - name: Delete Mock API resource group
        run: az group delete -n mock-api-${{ needs.run-id.outputs.id }} -y
